Scenarios
=========
The Factory Design Pattern should be used in scenarios where you want to create objects of different types (subclasses or implementations of a common interface) without exposing the creation logic to the client code. Here are some novice-friendly scenarios with examples where the Factory Design Pattern is useful:

**1. Creating Shapes:**

Imagine you are working on a drawing application that needs to create different shapes like circles, rectangles, and triangles. You can use a Shape Factory to create these shapes without the client code knowing the details of how each shape is created.

```java
// Factory Interface
interface Shape {
    void draw();
}

// Concrete Shapes
class Circle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a circle.");
    }
}

class Rectangle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a rectangle.");
    }
}

class Triangle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a triangle.");
    }
}

// Shape Factory
class ShapeFactory {
    public Shape createShape(String type) {
        if (type.equalsIgnoreCase("circle")) {
            return new Circle();
        } else if (type.equalsIgnoreCase("rectangle")) {
            return new Rectangle();
        } else if (type.equalsIgnoreCase("triangle")) {
            return new Triangle();
        }
        return null; // Handle unknown shapes
    }
}
```

**2. Database Connection Management:**

In a database application, you may need to manage different types of database connections, like MySQL, PostgreSQL, or Oracle. A Database Connection Factory can create the appropriate database connection without exposing the details to the client code.

```java
// Factory Interface
interface DatabaseConnection {
    void connect();
}

// Concrete Database Connections
class MySqlConnection implements DatabaseConnection {
    @Override
    public void connect() {
        System.out.println("Connected to MySQL database.");
    }
}

class PostgresConnection implements DatabaseConnection {
    @Override
    public void connect() {
        System.out.println("Connected to PostgreSQL database.");
    }
}

class OracleConnection implements DatabaseConnection {
    @Override
    public void connect() {
        System.out.println("Connected to Oracle database.");
    }
}

// Database Connection Factory
class DatabaseConnectionFactory {
    public DatabaseConnection createConnection(String dbType) {
        if (dbType.equalsIgnoreCase("mysql")) {
            return new MySqlConnection();
        } else if (dbType.equalsIgnoreCase("postgres")) {
            return new PostgresConnection();
        } else if (dbType.equalsIgnoreCase("oracle")) {
            return new OracleConnection();
        }
        return null; // Handle unknown database types
    }
}
```

**3. GUI Component Creation:**

In a graphical user interface (GUI) library, you may have different types of buttons, text fields, and checkboxes. A GUI Component Factory can create these components without exposing the internal implementation details to the client code.

```java
// Factory Interface
interface GUIComponent {
    void render();
}

// Concrete GUI Components
class Button implements GUIComponent {
    @Override
    public void render() {
        System.out.println("Rendering a button.");
    }
}

class TextField implements GUIComponent {
    @Override
    public void render() {
        System.out.println("Rendering a text field.");
    }
}

class Checkbox implements GUIComponent {
    @Override
    public void render() {
        System.out.println("Rendering a checkbox.");
    }
}

// GUI Component Factory
class GUIComponentFactory {
    public GUIComponent createComponent(String type) {
        if (type.equalsIgnoreCase("button")) {
            return new Button();
        } else if (type.equalsIgnoreCase("textfield")) {
            return new TextField();
        } else if (type.equalsIgnoreCase("checkbox")) {
            return new Checkbox();
        }
        return null; // Handle unknown component types
    }
}
```

In each of these scenarios, the Factory Design Pattern helps to encapsulate the object creation logic and provides a clean way to create objects without the client code needing to know the specifics of how those objects are constructed. It enhances code modularity and maintainability.